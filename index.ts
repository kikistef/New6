/*
 * Copyright (C) 2019-2021 HERE Europe B.V.
 * Licensed under Apache 2.0, see full license in LICENSE
 * SPDX-License-Identifier: Apache-2.0
 */
import "three/examples/js/controls/TrackballControls";
import { StyleSet, Theme, Feature  } from "@here/harp-datasource-protocol";
import { GeoCoordinates, sphereProjection } from "@here/harp-geoutils";
import { MapControls, MapControlsUI } from "@here/harp-map-controls";
import { CopyrightElementHandler, MapView, MapAnchor, MapViewEventNames, RenderEvent, MapViewUtils  } from "@here/harp-mapview";
import{ APIFormat, AuthenticationMethod, GeoJsonDataProvider, VectorTileDataSource } from "@here/harp-vectortile-datasource";
import { HereWebTileDataSource } from "@here/harp-webtile-datasource";
import { GUI } from "dat.gui";
import { FBXLoader } from "three/examples/jsm/loaders/FBXLoader.js";
import * as THREE from 'three';
import { CSG } from 'three-csg-ts';
import gsap from "gsap";
import * as turf from '@turf/turf';
//import { View } from "./View";

//const scene = new THREE.Scene();
/*
 * Copyright (C) 2020-2021 HERE Europe B.V.
 * Licensed under Apache 2.0, see full license in LICENSE
 * SPDX-License-Identifier: Apache-2.0
 */
////////////////////////fonction permettant de bouger l'egocar///////////////////



//export namespace HelloWorldExample {

const SunCalc = require("suncalc");

const FADE_DURATION = 30 * 60 * 1000; // in ms
const COLOR_CHANGE_DURATION = 2 * FADE_DURATION; // in ms
const TOTAL_FADE_DURATION = FADE_DURATION + COLOR_CHANGE_DURATION;
const COLOR_INTENSITY_FACTOR = 1.5;
const SUNRISE_COLOR = new THREE.Color("hsl(45, 100%, 75%)");
const SUNSET_COLOR = new THREE.Color("hsl(30, 100%, 60%)");

let mapView: MapView;
let mapControls: MapControls;
let trackball: any;
let debugCamera: THREE.PerspectiveCamera;
let directionalLightHelper: THREE.DirectionalLightHelper;
let shadowCameraHelper: THREE.CameraHelper;
let sun: THREE.DirectionalLight;
let MAX_SUN_INTENSITY: number;
const MAIN_SUN_COLOR = new THREE.Color();

const CONCORD = new GeoCoordinates(48.865339122933705, 2.321563154040291);
const concordStart = new GeoCoordinates(48.86562466026018, 2.3217665271639305);
const Saclay = new GeoCoordinates(48.853646831055556, 2.347297668457031);
const r5 = new GeoCoordinates(48.87011831622513, 2.306553077182798);
const eiffel = new GeoCoordinates(48.858226623375815, 2.2944796063358880);
const date = new Date();
const guiOptions = {
    year: date.getFullYear(),
    month: date.getMonth() + 1,
    day: date.getDate(),
    hours: date.getHours(),
    minutes: date.getMinutes(),
    time: date.getHours() + date.getMinutes() / 60,
    timeIndicator: `${date.getHours()}:${date.getMinutes()}`,
    debugCamera: false,
    enableRasterTiles: true,
    textureSquareSize: 1024,
	theme: "toto",
	FOV: 0,
	Dropshadows : true,
};
// Reference solar noon time is used to calculate time offsets at specific coordinates.
const refSolarNoon = SunCalc.getTimes(date, 0, 0).solarNoon;
// Main time offset.
const refTime = refSolarNoon.getTime() + date.getTimezoneOffset() * 60 * 1000;

function swapCamera() {
    mapControls.enabled = !mapControls.enabled;
    trackball.enabled = !trackball.enabled;
    mapView.pointOfView = mapControls.enabled ? undefined : debugCamera;
    directionalLightHelper.visible = !directionalLightHelper.visible;
    shadowCameraHelper.visible = !shadowCameraHelper.visible;
}

const hereWebTileDataSource = new HereWebTileDataSource({
    authenticationCode: "uL9iNGiIWGa7tzzXK0O9Uv5jIz3n0IXGE5hAKMnsAUk",
    renderingOptions: { renderOrder: 50 },
    name: "raster-tiles"
});

function setupDebugStuff() {
    const mapCameraHelper = new THREE.CameraHelper(mapView["m_rteCamera"]);
    mapCameraHelper.renderOrder = Number.MAX_SAFE_INTEGER;
    mapView.scene.add(mapCameraHelper);

    debugCamera = new THREE.PerspectiveCamera(
        mapView.camera.fov,
        mapView.canvas.width / mapView.canvas.height,
        100,
        100000
    );
    mapView.scene.add(debugCamera);
    debugCamera.position.set(600, 200, 100);

    trackball = new (THREE as any).TrackballControls(debugCamera, mapView.canvas);
    trackball.enabled = false;
    trackball.addEventListener("start", () => {
        mapView.beginAnimation();
    });
    trackball.addEventListener("end", () => {
        mapView.endAnimation();
    });
    trackball.addEventListener("change", () => {
        mapView.update();
    });

    trackball.staticMoving = true;
    trackball.rotateSpeed = 3.0;
    trackball.zoomSpeed = 4.0;
    trackball.panSpeed = 2.0;

    directionalLightHelper = new THREE.DirectionalLightHelper(sun, 500);
    directionalLightHelper.visible = false;
    mapView.scene.add(directionalLightHelper);

    shadowCameraHelper = new THREE.CameraHelper(sun.shadow.camera);
    shadowCameraHelper.visible = false;
    mapView.scene.add(shadowCameraHelper);

    let lastZoomLevel = mapView.zoomLevel;
    mapView.addEventListener(MapViewEventNames.Render, () => {
        const trackballTarget = trackball.target as THREE.Vector3;
        if (lastZoomLevel !== mapView.zoomLevel) {
            trackballTarget.set(0, 0, -mapView.targetDistance);
            lastZoomLevel = mapView.zoomLevel;
        }
        trackball.update();

        const enableCameraHelpers = mapView.pointOfView !== undefined;
        if (enableCameraHelpers) {
            mapCameraHelper.update();
        }
        mapCameraHelper.visible = enableCameraHelpers;

        directionalLightHelper.update();
        shadowCameraHelper.update();
    });
}

function update() {
	//guiOptions.FOV = 0;
    guiOptions.time = guiOptions.hours + guiOptions.minutes / 60;
    guiOptions.timeIndicator = `${guiOptions.hours}:${guiOptions.minutes}`;

    const { latitude, longitude } = mapView.geoCenter;
    const lightPos = sun.position;
    // Dirty time is a time without taking into account the time offset at the specific coordinates.
    const dirtyTime = new Date(
        guiOptions.year,
        guiOptions.month - 1,
        guiOptions.day,
        guiOptions.hours,
        guiOptions.minutes,
        0
    );

    // Calculating time offset at current location.
    const timeOffset = SunCalc.getTimes(date, latitude, longitude).solarNoon.getTime() - refTime;
    // Time with corrected offset.
    const locationDate = new Date(dirtyTime.getTime() + timeOffset);

    const sunTimes = SunCalc.getTimes(locationDate, latitude, longitude);
    const sunPosition = SunCalc.getPosition(locationDate, latitude, longitude);

    const azimuth = sunPosition.azimuth;
    const altitude = sunPosition.altitude - Math.PI / 2;

    const r = mapView.targetDistance;
    lightPos.setX(r * Math.sin(altitude) * Math.sin(azimuth));
    lightPos.setY(r * Math.sin(altitude) * Math.cos(azimuth));
    lightPos.setZ(r * Math.cos(altitude) - r);
    // Resetting the target is important, because this is overriden in the MapView.
    // This is an ugly hack and HARP-10353 should improve this.
    sun.target.position.set(0, 0, -r);

    sun.color.set(MAIN_SUN_COLOR);

    const location_ms = locationDate.getTime();
    const sunriseDiff = location_ms - sunTimes.sunriseEnd.getTime();
    const sunsetDiff = sunTimes.sunsetStart.getTime() - location_ms;
    if (sunriseDiff > 0 && sunsetDiff > 0) {
        if (sunriseDiff < TOTAL_FADE_DURATION || sunsetDiff < TOTAL_FADE_DURATION) {
            let color: THREE.Color;
            let colorDiff: number;
            if (azimuth < 0) {
                color = SUNRISE_COLOR;
                colorDiff = sunriseDiff;
            } else {
                color = SUNSET_COLOR;
                colorDiff = sunsetDiff;
            }
            sun.color.lerpHSL(
                color,
                THREE.MathUtils.clamp(1 - (colorDiff - FADE_DURATION) / COLOR_CHANGE_DURATION, 0, 1)
            );

            if (colorDiff <= FADE_DURATION) {
                sun.intensity = THREE.MathUtils.lerp(
                    0,
                    MAX_SUN_INTENSITY * COLOR_INTENSITY_FACTOR,
                    colorDiff / FADE_DURATION
                );
            } else {
                sun.intensity = THREE.MathUtils.lerp(
                    MAX_SUN_INTENSITY,
                    MAX_SUN_INTENSITY * COLOR_INTENSITY_FACTOR,
                    THREE.MathUtils.clamp(
                        1 - (colorDiff - FADE_DURATION) / COLOR_CHANGE_DURATION,
                        0,
                        1
                    )
                );
            }
        } else {
            sun.intensity = MAX_SUN_INTENSITY;
        }
    } else {
        sun.intensity = 0;
    }

    mapView.update();
}
//////////////////////////initialisation de la map ICI////////////////////

function initializeMapView(id: string/*, theme: Theme*/): MapView {
    const canvas = document.getElementById(id) as HTMLCanvasElement;
    mapView = new MapView({
        canvas,
        theme: {
                extends: "resources/berlin_tilezen_effects_streets.json",
                // end:harp_gl_hello_custom_theme_0.ts
        lights: [
            {
                type: "ambient",
                color: "#ffffff",
                name: "ambientLight",
                intensity: 0.9
            },
            {
                type: "directional",
                color: "#ffffff",
                name: "light1",
                intensity: 1.3,
                // Will be overriden immediately, see `update`
                direction: {
                    x: 0,
                    y: 0.1,
                    z: -1
                },
                castShadow: true
            }
        ],
        definitions: {
            // Opaque buildings
            defaultBuildingColor: { value: "#777b7dF1" }
        }
    },
		maxVisibleDataSourceTiles: 1024,
		tileCacheSize: 2000,
		enableNativeWebglAntialias: true,
		fovCalculation: { type: "dynamic", fov: guiOptions.FOV },
	    enableShadows: guiOptions.Dropshadows,
		//zoomLevel: 4,
		target: Saclay,
		//projection: sphereProjection,
	});
    mapView.renderLabels = false;
    mapView.fog.enabled = true;
	mapView.renderer.toneMappingExposure = options.toneMappingExposure;
    mapView.mapRenderingManager.outline.enabled = options.outline.enabled;
    mapView.mapRenderingManager.updateOutline(options.outline);
    mapView.mapRenderingManager.bloom = options.bloom;
    mapView.mapRenderingManager.vignette = options.vignette;
    mapView.mapRenderingManager.sepia = options.sepia;
	

    //CopyrightElementHandler.install("copyrightNotice", mapView);

    mapControls = new MapControls(mapView);
    mapControls.maxTiltAngle = 90;

    const ui = new MapControlsUI(mapControls, { projectionSwitch: false, zoomLevel: "input" });
    canvas.parentElement!.appendChild(ui.domElement);

	

	
    mapView.lookAt({ target: Saclay, zoomLevel: 18, tilt: 15 });

    mapView.resize(window.innerWidth, window.innerHeight);
    window.addEventListener("resize", () => {
        mapView.resize(window.innerWidth, window.innerHeight);
    });

    addVectorTileDataSource().then(() => {
        const light = mapView.lights.find(item => item instanceof THREE.DirectionalLight) as
            | THREE.DirectionalLight
            | undefined;
        if (light === undefined) {
            throw new Error("Light for a sun was not found.");
        }
        sun = light;
        MAX_SUN_INTENSITY = sun.intensity;
        MAIN_SUN_COLOR.copy(sun.color);

        mapView.addEventListener(MapViewEventNames.MovementFinished, update);

        addGuiElements();
        setupDebugStuff();
        update();
    });

    return mapView;
}

/*
	const optionsRot = {
        target: new GeoCoordinates(48.87011831622513, 2.306553077182798),
        tilt: 5,
        zoomLevel: 18,
        heading: 0,
        //globe: true,
        headingSpeed: 0.1
    };
mapView.addEventListener(MapViewEventNames.AfterRender, () => {
	optionsRot.heading = (optionsRot.heading + optionsRot.headingSpeed) % 360;
	mapView.lookAt(optionsRot);
	update();
});*/

const addVectorTileDataSource = (): Promise<void> => {
    const omvDataSource = new VectorTileDataSource({
        baseUrl: "https://vector.hereapi.com/v2/vectortiles/base/mc",
        authenticationCode: 'J0IJdYzKDYS3nHVDDEWETIqK3nAcxqW42vz7xeSq61M',
		addGroundPlane: false,
    });

    return mapView.addDataSource(omvDataSource);
};


function addGuiElements() {
    // Control light direction
    const gui = new GUI({ width: 300, autoPlace: false});
	var customContainer = document.getElementById('my-gui-container');
	customContainer.appendChild(gui.domElement);
	
	const themeFolder = gui.addFolder('Themes')
	    const optionsTheme = {
        theme: {
			//streets_shadows: "",
            streets_Blue: "resources/berlin_tilezen_effects_streets.json",
			streets_Pink: "resources/berlin_tilezen_effects_streetspink.json",
			streets_Full_Orange: "resources/berlin_tilezen_effects_streetsNoGlowMonochrome.json",
			streets_Full_Green: "resources/berlin_tilezen_effects_streetsGreenNoGlowMonochrome.json",
			streets_Full_Yellow: "resources/berlin_tilezen_effects_streetsYellowNoGlowMonochrome.json",
			streets_Full_Blue: "resources/berlin_tilezen_effects_streetsBlueNoGlowMonochrome.json",
            outlines: "resources/berlin_tilezen_effects_outlines.json"
        },
        postEffects: {
            "resources/berlin_tilezen_effects_streets.json": "resources/effects_streets.json",
			"resources/berlin_tilezen_effects_streetspink.json": "resources/effects_streets.json",
			"resources/berlin_tilezen_effects_streetsNoGlowMonochrome.json": "resources/effects_streets2.json",
			"resources/berlin_tilezen_effects_streetsGreenNoGlowMonochrome.json": "resources/effects_streets2.json",
			"resources/berlin_tilezen_effects_streetsYellowNoGlowMonochrome.json": "resources/effects_streets2.json",
			"resources/berlin_tilezen_effects_streetsBlueNoGlowMonochrome.json": "resources/effects_streets2.json",
            "resources/berlin_tilezen_effects_outlines.json": "resources/effects_outlines.json"
        }
    };
    const selector = themeFolder.add(optionsTheme, "theme", optionsTheme.theme);
    selector
        .onChange(async (value: string) => {
            await mapView.setTheme(value);
			mapView.shadowsEnabled = true;
			//initializeMapView("mapCanvas");
            mapView.loadPostEffects((optionsTheme.postEffects as { [key: string]: string })[value]);
		
        })
        //.setValue(optionsTheme.theme.streets_Blue);
	
	
	
	
	
	const timeFolder = gui.addFolder('Time settings')
    timeFolder.add(guiOptions, "year").onChange(update);
    timeFolder.add(guiOptions, "month").onChange(update);
    timeFolder.add(guiOptions, "day").onChange(update);
    const timeSlider = timeFolder.add(guiOptions, "time", 0, 24, 0.01);
    const timeIndicator = timeFolder.add(guiOptions, "timeIndicator");
	timeFolder.open();
	
	const FOV = gui.add(guiOptions,  "FOV", 0, 100, 1).onChange(updateRendering);
	//const Dropshadows = gui.add(guiOptions,  "Dropshadows");
    timeSlider.onChange(() => {
        guiOptions.hours = Math.floor(guiOptions.time);
        guiOptions.minutes = Math.floor((guiOptions.time - guiOptions.hours) * 60);

        update();
        timeIndicator.updateDisplay();
    });
    timeIndicator.onChange(() => {
        const time = guiOptions.timeIndicator.split(":");
        guiOptions.hours = parseInt(time[0], 10);
        guiOptions.minutes = parseInt(time[1], 10);

        update();
        timeSlider.updateDisplay();
    });
    //gui.add(guiOptions, "debugCamera").onChange(swapCamera);
   /* gui.add(guiOptions, "enableRasterTiles").onChange((enable: boolean) => {
        const rasterSource = mapView.getDataSourceByName("raster-tiles");
        if (rasterSource && !enable) {
            mapView.removeDataSource(rasterSource);
        } else if (!rasterSource && enable) {
            mapView.addDataSource(hereWebTileDataSource);
        }
    });*/
    gui.add(guiOptions, "textureSquareSize", 128, 512, 32).onChange(size => {
        (sun.shadow.mapView as any).dispose();
        (sun.shadow as any).mapView = null;
        sun.shadow.mapSize.width = size;
        sun.shadow.mapSize.height = size;
        mapView.update();
    });
	const effects = gui.addFolder('Effects')
	effects.add(guiOptions, "Dropshadows").onChange(updateRendering);
	
	
	
}


const options = {
		//Dropshadows: true,
        labels: true,
        toneMappingExposure: 1.0,
        outline: {
            enabled: true,
            ghostExtrudedPolygons: true,
            thickness: 0.005,
            color: "#000"
        },
        bloom: {
            enabled: true,
            strength: 1,
            threshold: 0.8, //0.3
            radius: 0.9
        },
        vignette: {
            enabled: true,
            offset: 1.0,
            darkness: 1.0
        },
        sepia: {
            enabled: false,
            amount: 0.55
        }
    };

   const updateRendering = () => {
        mapView.shadowsEnabled = guiOptions.Dropshadows;
	   mapView.scene.fov = guiOptions.FOV;//////////a revoir
	   //mapView.
	   //initializeMapView("canvas");
	   //map.renderLabels = options.labels;
	   console.log("fov : " + guiOptions.FOV)
        //mapView.update();
    };

    //updateRendering();

   /* const updateRendering = () => {
      
        mapView.renderLabels = options.labels;
        mapView.renderer.toneMappingExposure = options.toneMappingExposure;
        mapView.mapRenderingManager.outline.enabled = options.outline.enabled;
        mapView.mapRenderingManager.updateOutline(options.outline);
        mapView.mapRenderingManager.bloom = options.bloom;
        mapView.mapRenderingManager.vignette = options.vignette;
        mapView.mapRenderingManager.sepia = options.sepia;
        // end:effects_example.ts
        mapView.update();
    };

    updateRendering();*/

    
//initializeMapView("mapCanvas");
//}


	
  
/**
 * This example builds on top of the [[HelloWorldExample]], so please consult that first for
 * any questions regarding basic setup of the map.
 *
 * This example shows how to use [[MapViewUtils]] to compute camera positions and orientations
 * and use them to animate them with [THREE.js](https://threejs.org/).
 *
 * [CatmulRomCurve3](https://threejs.org/docs/index.html#api/en/extras/curves/CatmullRomCurve3) is
 * used to interpolate between two camera positions and
 * [Quaternion](https://threejs.org/docs/index.html#api/en/math/Quaternion.slerp) is used to
 * interpolate between two camera orientations.
 */
var list1 = [
		[2.321563153778385,48.865339122995266],[2.3217584284354587,48.86560977846898],[2.3217665271639305,48.86562466026018],[2.321787885732789,48.86566390456687],[2.3218527582150728,48.86578307711147],[2.321917778631672,48.8659024543652],[2.3219393113930096,48.86594193498834],[2.3219476378212676,48.86595711812089],[2.321953296490449,48.865979775037516],[2.3219584531022974,48.86600177845696],[2.321957853231538,48.86602086902366],[2.321957173202719,48.86604135020127],[2.3219520142014574,48.866066246952215],[2.321946933943167,48.86608976239566],[2.3219277227645136,48.86612480526972],[2.3219053167351262,48.866151726837046],[2.321883909625882,48.86617720739031],[2.321854084358108,48.86620005077694],[2.321824164467955,48.866223059203065],[2.3217743552966965,48.86624670820885],[2.3217245891757443,48.86627022101851],[2.3215738406018147,48.866304038447026],[2.321505523534398,48.866308212447024],[2.3214625062746563,48.86630361686679],[2.321421880304058,48.86629904210457],[2.3214208915478025,48.86629898676591],[2.321298406946056,48.8662715310669],[2.3211975475036013,48.86622405339597],[2.3210912903334986,48.86611956505385],[2.3209492130022795,48.86593769214508],[2.3209492130010005,48.865937135816694],[2.320929597928682,48.86591295505872],[2.32090523618362,48.865882615827246],[2.320893971375966,48.86586914310425],[2.3208682106597394,48.865838732639105],[2.3207929234334017,48.86575019348348],[2.320718820430784,48.86566319093063],[2.320694541177346,48.86563470267734],[2.320685352195312,48.86562392324777],[2.3200537158384975,48.865814321585304],[2.319912417399763,48.86586074456059],[2.3199124174107624,48.86586063428069],[2.3198938958720134,48.86586654291693],[2.319839880338037,48.865883774916284],[2.3196344967530536,48.86594929818193],[2.319314232573163,48.8660514758825],[2.3188967858329477,48.86618466528401],[2.318399840743325,48.866343228118524],[2.3178412802936066,48.866521462799994],[2.316612834009277,48.86691350753475],[2.315364012755822,48.86731215807953],[2.3147823203809708,48.86749790494653],[2.3142571665666196,48.86766565331007],[2.3138101908217834,48.8678085037111],[2.313463306014171,48.86791946932172],[2.3132384574613525,48.86799155268008],[2.3131785904680555,48.86801084718442],[2.3131573210568774,48.868017841850985],[2.313132524710767,48.868026099307116],[2.313066421260544,48.86804737616464],[2.3128335435567635,48.86812164385847],[2.3125050973700922,48.868225984511696],[2.3121277886875475,48.86834564287537],[2.3117490498158872,48.8684656335229],[2.311417193061459,48.86857069267245],[2.3111812768789264,48.86864532081475],[2.311114730948219,48.86866634697981],[2.311090672719814,48.868673919851574],[2.31105741920004,48.86868416209623],[2.310972260511562,48.86871051343684],[2.310715188835786,48.8687901533942],[2.3104580768148253,48.868869844021305],[2.3103732604681113,48.86889613699603],[2.3103410789496195,48.86890611389131],[2.3098954665417466,48.86905181667646],[2.3098954665343854,48.86905192694533],[2.3098250760461383,48.86907380808364],[2.309754326972751,48.86909584077108],[2.3097293597528505,48.8691038711014],[2.3096637270847395,48.86912494932545],[2.3094642606674824,48.869188979045276],[2.3092639344865233,48.86925325550075],[2.3091974646071662,48.86927456595359],[2.309171683622168,48.86928280644992],[2.309129801351446,48.86929703392977],[2.30908908181695,48.86931103664088],[2.309064316236544,48.869318803109536],[2.3089994576423294,48.869339083328356],[2.308802567630039,48.8694006113254],[2.3086050266131792,48.86946234761339],[2.3085395832903544,48.869482816703595],[2.308514344621102,48.869490739715985],[2.30847765093219,48.86950261867054],[2.308381893473893,48.869533553330626],[2.308091353823073,48.86962736736157],[2.3077999385538135,48.869721453090136],[2.307703587022246,48.86975256591995],[2.307666816366492,48.869764450805604],[2.307605059547626,48.86978396347226],[2.307469734172912,48.86982667926293],[2.307334039122196,48.86986953222748],[2.3072715925837883,48.86988932420306],[2.3072447064814696,48.86989787778933],[2.307174792615797,48.86992002046432],[2.3069629853777087,48.86998703139304],[2.3067508417304623,48.87005412709826],[2.306680769866489,48.87007629279543],[2.3066540585208486,48.87008475347807],[2.3066037028485766,48.87010155093242],[2.306553077182798,48.87011831622513],[2.3065260321018286,48.87012654964488],[2.3064672626865956,48.87014454311458],[2.3064084697911085,48.87016257842319],[2.3063814320192364,48.87017091354204],[2.306323788268827,48.87019006089372],[2.3062660970365982,48.87020917611778],[2.306237033449179,48.87021831582089],[2.3061608216976026,48.87024227368062],[2.3059294025322856,48.870315023246576],[2.3056972848953876,48.870388011550716],[2.30562051181397,48.87041216989658],[2.305591132488672,48.87042144258396],[2.305519764873736,48.870444594322834],[2.305363423951576,48.87049521393462],[2.305206682555621,48.8705459631083],[2.305134669154711,48.8705693238511],[2.3050650894178943,48.87059138438906],[2.304882341116837,48.87064925202071],[2.3046235150830228,48.870731191095985],[2.304325875627711,48.870825411064686],[2.3040271197350535,48.87091998450822],[2.303765469016099,48.87100281806133],[2.3035795892730278,48.87106167784617],[2.3035083323788967,48.871084271100926],[2.3034745964160663,48.871095176944095],[2.3033872866221827,48.87112333398309],[2.3031229216940687,48.871208537553144],[2.3028578961454116,48.87129392607605],[2.3027701611032114,48.87132218532801],[2.302736434322469,48.87133303959294],[2.3026698456254167,48.871353866285546],[2.302524558388825,48.871399326546566],[2.3023783636893995,48.87144507467738],[2.3023095179597988,48.871466619430294],[2.302255407890158,48.87148384408647],[2.302115917167555,48.871528264905095],[2.301693604745765,48.8716627625146],[2.3012699850832234,48.871797679874334],[2.301129872691007,48.87184230311303],[2.301076419993194,48.871859324853204],[2.301042024402335,48.87187067756807],[2.3009672045357092,48.871895368112234],[2.300892049853303,48.871920108601586],[2.3008567732886434,48.87193157038146],[2.3007981504183874,48.871950023310745],[2.300644973966996,48.87199843133794],[2.300179453161718,48.87214570393087],[2.299711332015761,48.872293895806564],[2.2995561274067597,48.87234306629426],[2.299496508945964,48.872362003424854],[2.2994526535351554,48.87237604271306],[2.299338717998438,48.872412393444336],[2.2989932827043447,48.87252250121364],[2.2986467293444264,48.87263289648956],[2.2985320637477002,48.87266939402525],[2.298488193313034,48.872683318126775],[2.298411367094161,48.87270742403598],[2.298243516977408,48.87276025363886],[2.2980755510789095,48.8728131699778],[2.2979989881962695,48.87283734386992],[2.2979749170184505,48.872845025745335],[2.2979069756757724,48.8728666713445],[2.2976641498257493,48.87294400145791],[2.297319743011883,48.873053662202125],[2.296923280427535,48.87317988835238],[2.296525023161763,48.873306680522916],[2.2961761275885237,48.87341775446944],[2.2959285098317537,48.87349658423119],[2.2958590092734426,48.87351870966407],[2.295834403699075,48.873526542782514],[2.2958495662489895,48.873553745724735],[2.295868697391228,48.87358615439163],[2.295885866299045,48.8736155098114],[2.2959005415259526,48.87363932144444],[2.29591230042206,48.87366895467184],[2.295922587467345,48.87369893292231],[2.2959287807022406,48.87372766354761],[2.295934835214524,48.87375693320908],[2.295937530041499,48.87379177767875],[2.2959402372601403,48.87382577719407],[2.295931791340905,48.87386365749171],[2.2959234703967297,48.87390186958177],[2.295908311976092,48.87393827806957],[2.2958916133583784,48.87397575628006],[2.2958716978725704,48.87400813223621],[2.2958530495777154,48.87403971781413],[2.295826937122456,48.87407071477551],[2.295801072306773,48.87410147370022],[2.295764742103813,48.874138346347365],[2.295720591393149,48.874182107428254],[2.295673195129723,48.874213615401004],[2.295633403711008,48.87423834923766],[2.295584708850157,48.874263744597926],[2.29553615591675,48.8742890770894],[2.2954859628294173,48.874308913050754],[2.295435554745154,48.87432877711302],[2.2953668176810424,48.8743458178601],[2.2952963897950838,48.8743629632182],[2.2952234052429503,48.874372938796625],[2.295152194780428,48.874382813205244],[2.2951046004074556,48.874386696412074],[2.2950465635518924,48.87439053264188],[2.294935902265877,48.87438832708898],[2.29486953208513,48.874384368554274],[2.2948276390551428,48.87438043206515],[2.2947839958165446,48.874373616136126],[2.2947296570952176,48.87436432108129],[2.2946738036971226,48.87434964563039],[2.294612078739135,48.87433371019728],[2.294549926506562,48.874311707615846],[2.2945042985837745,48.87429343269156],[2.2944681292092355,48.87427665994758],[2.294421013916093,48.87425476625529],[2.2943837020820013,48.87423287525206],[2.2943573256455068,48.87421609978904],[2.2943152915706833,48.87418613595861],[2.294271591428668,48.87415487782252],[2.2942292475327974,48.874113352206734],[2.294202302573609,48.87408474628998],[2.2941767163306963,48.87405730026987],[2.294176059014518,48.8740566002993],[2.294158686472599,48.87402819079105],[2.29413931577875,48.873995378138375],[2.294119719387055,48.87394382257517],[2.294109052136605,48.87391418455587],[2.2941001229963263,48.873884211389424],[2.2940967694631524,48.87384581736495],[2.2940933874704683,48.87381092307504],[2.294097034979046,48.87378498276061],[2.2941020361749622,48.87374607501255],[2.294108768215807,48.87370545411986],[2.294114144361913,48.873677813803255],[2.294127048660073,48.87364622151631],[2.294145279702775,48.87360158867406],[2.2941687057457045,48.87355921984789],[2.294186793486432,48.873529914195075],[2.294219716880008,48.87349294501672],[2.294254253380302,48.87345482653416],[2.294295588279141,48.87342115325117],[2.2943355512081496,48.873387702623205],[2.2943824105614965,48.8733581989986],[2.294428957219708,48.873329680185634],[2.294481350660959,48.87330438693539],[2.294538592271266,48.87327681769085],[2.2945920991308526,48.87325808081221],[2.294640696132376,48.87324164576148],[2.294640528492721,48.873241204720784],[2.29462729476262,48.87322298415836],[2.2945923870047977,48.87317492428866],[2.2944863108744187,48.8730288986977],[2.2943798124568957,48.8728823378751],[2.294344370826707,48.87283360089299],[2.2943303806025597,48.872814420192014],[2.294320861758166,48.87280207034789],[2.2942971243253396,48.872771230919255],[2.294225474040047,48.87267809643336],[2.2941523882315664,48.87258304024522],[2.2941148202875468,48.87253407956106],[2.2940747363584535,48.87248043566973],[2.294036434719999,48.87242774304889],[2.294019208024338,48.87240341473159],[2.293978526376293,48.872346703962194],[2.2938585243233547,48.87218003047428],[2.2937398658025074,48.87201549309626],[2.2937008556746434,48.871961441781366],[2.2936859570941124,48.871940820440045],[2.2936672407894605,48.871916700882565],[2.293626559990088,48.87186425941999],[2.293585908224344,48.871811861419474],[2.293567277569508,48.87178787048259],[2.293556834164093,48.87177357669205],[2.293529536204346,48.87173616118304],[2.293446832952668,48.871622762101595],[2.2933640742661225,48.87150925912479],[2.293336703490212,48.871471709038275],[2.2933261528264666,48.87145721973647],[2.293307755670355,48.871430941947835],[2.2932679624149443,48.87137411610698],[2.293228246610994,48.87131738740061],[2.293210077418138,48.87129139486555],[2.293194205708346,48.87126942418453],[2.293149462128099,48.87120752369],[2.293079975199987,48.87111140313084],[2.29298987450008,48.87098677367649],[2.2927643490483263,48.87067483135752],[2.2925059071995975,48.87031736559251],[2.2922475383994936,48.8699600020621],[2.2920221938515795,48.869648314818335],[2.2919321937682753,48.86952382933475],[2.291862792854289,48.86942783483593],[2.2918181041384287,48.86936602014961],[2.291802241700168,48.869344075525305],[2.291791463217038,48.86932896880788],[2.2917633014893113,48.86928950809289],[2.291678013022704,48.86916999054796],[2.2915927377729304,48.86905044372327],[2.2915645880524096,48.869010940219965],[2.291553819565138,48.868995764257846],[2.29153725377725,48.868972851718354],[2.291501154099848,48.868923198889746],[2.291465032879813,48.86887357998802],[2.2914483998112303,48.86885076567589],[2.2914264240345403,48.86882191919378],[2.2913785639320565,48.868759066951554],[2.2913307607129525,48.86869627131259],[2.2913089528204296,48.86866759115509],[2.291287780528222,48.86863726792828],[2.291241393486928,48.868570879299654],[2.2911949903161144,48.868504483187564],[2.2911737635225222,48.868474128929336],[2.291155740174844,48.86844772886914],[2.2911163751262507,48.86839000983653],[2.2910769977025893,48.86833223594712],[2.2910589320808015,48.86830566389634],[2.2910480504600628,48.86829083436996],[2.291018650424718,48.86825088526035],[2.2909219510782464,48.868119547089776],[2.2908041428877652,48.86795948291635],[2.290700522608404,48.867818510336605],[2.2905660293053245,48.86763442361814],[2.2904964049035073,48.86753910539031],[2.2904109280312923,48.86742269183708],[2.2903307470212155,48.867315149444124],[2.2903025575043046,48.86727779739013],[2.290291370865816,48.86726303807541],[2.290282272178956,48.86725016524355],[2.2902567464568335,48.86721403423556],[2.2901657849409105,48.86708527285822],[2.2900372300444474,48.86690330657396],[2.2898898203762315,48.866694680905226],[2.2897422820200575,48.866485923998994],[2.289613326077898,48.866303543212695],[2.2895216511327874,48.86617402855188],[2.289495635638133,48.866137371786806],[2.2894859506462524,48.86612386293578],[2.2894551344553236,48.86608177731566],[2.2893911310586645,48.86599344618392],[2.289327717916649,48.8659057808037],[2.2892986637467345,48.865865680622306],[2.289271567045546,48.86582843496646],[2.289200594611202,48.86573072351479],[2.2891002949495487,48.865592557425],[2.28898521419336,48.86543394467827],[2.2888698924977575,48.865274885235635],[2.2887688627722014,48.86513536932608],[2.288696651750598,48.86503537886858],[2.2886677833848807,48.864994892018956],[2.28864073310541,48.86495685252501],[2.288573299083538,48.86486329335139],[2.2884789913380814,48.864732828942664],[2.28837131743677,48.86458407041266],[2.28826377950503,48.86443562153741],[2.288169873283806,48.8643060775039],[2.28810308924119,48.8642140264061],[2.288076915710832,48.86417805348384],[2.288063991648272,48.864160634908416],[2.2880321920870017,48.86411759410413],[2.2879373419015394,48.86398907800594],[2.28784310867826,48.86386135990708],[2.287812076240243,48.86381931122966],[2.287800219989464,48.863803273514606],[2.2877917281233806,48.86379153344478],[2.2877695946135077,48.863760851833774],[2.2877025984394947,48.86366792218982],[2.2876356184688973,48.86357499483029],[2.287613502639772,48.86354431258394],[2.287605031642812,48.86353256636437],[2.2875938891652083,48.863519060724826],[2.2875697215253012,48.86348980167932],[2.2875456203316276,48.86346062973561],[2.287534677314028,48.86344738558293],[2.287462123605053,48.86346285650532],[2.287381989359062,48.86347967199595],[2.287300448429278,48.86348843137009],[2.2872156685518803,48.86349581519866],[2.2871649552502618,48.86349242820714],[2.287067249139767,48.86348503516871],[2.286972145059991,48.86347764831257],[2.286929378633687,48.863474290931975],[2.2867412452773124,48.86342586128501],[2.286717905213777,48.86341269726984],[2.2866665027897,48.863383579367024],[2.2866149752121885,48.86335407468968],[2.286591283876561,48.86333976403583],[2.286574843857835,48.86332433790676],[2.286539257682648,48.86329237186632],[2.2865037807160036,48.863260782546604],[2.2864876742045794,48.86324649184033],[2.2864304162072244,48.86312452025609],[2.2864168253800017,48.86308352604911],[2.286403150508818,48.86303662877671],[2.286399016847639,48.86298792809609],[2.2863949707848974,48.86294514973014],[2.2863995338981624,48.86290498380765],[2.286403150507965,48.86286622649121],[2.2864161750725884,48.86283206297597],[2.286430416205917,48.86279627170521],[2.286448281072609,48.86276116383809],[2.2864658616224744,48.86272631682024],[2.28648730914918,48.86269486255563],[2.286512213325352,48.86265994927402],[2.2865350538494056,48.86263782961845],[2.286580992955777,48.86259357948981],[2.2866265831412136,48.86254991697112],[2.2866484372471234,48.86252950203837],[2.2866751305499236,48.86251378661538],[2.2867309663558615,48.86248085073876],[2.2867862115978994,48.86244825045111],[2.286811209800078,48.86243349663329],[2.2870438945952287,48.86236219109111],[2.287064483515053,48.86237627361763],[2.2871189119042867,48.86241349823493],[2.2872852482361736,48.862527230037784],[2.287454915301055,48.86264316050918],[2.287513559536336,48.86268316944535],[2.2875401304591207,48.86270120479102],[2.2875614437153615,48.862715776780306],[2.287606312121426,48.86274671183705],[2.2877348619786915,48.86283556390865],[2.287862129569845,48.86292358423742],[2.2879054236852596,48.86295349945382],[2.2879245769242686,48.862966674230904],[2.287961931660334,48.862989912403464],[2.2880328000882173,48.86303346160517],[2.2881020336351128,48.86307589781569],[2.288134522854108,48.86309582101893],[2.288170837502861,48.86311126739349],[2.2882475587445583,48.863143240904634],[2.288323640421936,48.86317481581949],[2.2883581016538983,48.863189093490604],[2.288417950644771,48.86320460963299],[2.288579119920371,48.8632464171574],[2.288813969897177,48.86330738566963],[2.289094894588686,48.86338039332594],[2.289685365066987,48.86353425090897],[2.289940655267287,48.8636011047862],[2.290133474405337,48.863651997072225],[2.290461189283377,48.863739164038634],[2.290578273603302,48.86377030327364],[2.2906239961668575,48.863782463002536]];
//
//
//
var list2 = [
		[2.321563154040291,48.865339122933705],[2.321760466339839,48.86561029429362],[2.321768507629997,48.86562519555929],
		[2.321789707655654,48.865664480977756],[2.3218196806459446,48.865720022971516],[2.3218540408300044,48.86578369397725],[2.3218884024369117,48.8658473664652],[2.3219183796994116,48.86590291294539],[2.3219395868443087,48.865942205961176],[2.3219476381017614,48.86595711806933],[2.321948895608813,48.86596368242624],[2.321951632505659,48.865978091497766],[2.321954363707391,48.86599249431288],[2.321955604126714,48.86599903990927],[2.321955619136446,48.86600521166696],[2.321955644152979,48.86601899141175],[2.3219556491557967,48.86603327585519],[2.321955604126714,48.86604096171487],[2.32195369206093,48.86604987575015],[2.321949589582971,48.86606686217371],[2.3219455071175332,48.86608334389035],[2.3219436550905357,48.86609074381386],[2.3219364332932457,48.86610578540254],[2.32192772304424,48.86612480522109],[2.321920039987617,48.866135230812574],[2.321905072252804,48.86615299540418],[2.321890476631779,48.866169765431465],[2.3218839099154422,48.86617720734074],[2.3218745896037944,48.8661843429401],[2.32185407698762,48.86620005658773],[2.3218335445409934,48.86621580856223],[2.3218241647415425,48.86622305915134],[2.3218085614807364,48.86623051443161],[2.321774337433112,48.86624671672621],[2.3217401332159397,48.866262880685014],[2.3217245894513496,48.866270220968175],[2.3215732350086,48.866302972203954],[2.321563826416167,48.86630379522245],[2.3215425028300842,48.866305603602996],[2.3215055238097477,48.86630821240007],[2.321488940704427,48.86630676682066],[2.321460578766903,48.86630361592813],[2.3214337785389034,48.86630047068604],[2.321421880565822,48.86629904205793],[2.3214258635770477,48.86630035210615],[2.3212984072067684,48.8662715310175],[2.321194848904099,48.86622436920072],[2.32109129060143,48.86611956500502],[2.320953876699889,48.86593746719393],[2.320953876699889,48.865936157134655],[2.32094823207575,48.86592850989339],[2.320935339234069,48.86591107011037],[2.3209212597190287,48.86589209069862],[2.320912055077315,48.865879824582834],[2.320901167298757,48.86586643387113],[2.3208764007495404,48.865836239822244],[2.3208041319241772,48.865748359275386],[2.3207660799410235,48.86570213158993],[2.3207330497720875,48.865662018203636],[2.3207097665627714,48.865633748569365],[2.320700955460694,48.86562305214562],[2.3200537160683155,48.86581432153156],[2.3200537160683155,48.86581432153156],[2.3199124176383634,48.86586074450733],[2.3199124176383634,48.86586063423147],[2.319893072796873,48.86586680551261],[2.3198366831868498,48.865884794887904],[2.319745716175106,48.865913815651396],[2.319622639129591,48.86595308109145],[2.31946991941831,48.86600180449088],[2.319290024408133,48.86605919913106],[2.31908542146698,48.86612447829239],[2.3188585779629136,48.866196855254145],[2.3186119612639686,48.86627554329817],[2.318348038738094,48.866359755707634],[2.31806927775213,48.8664487057701],[2.317778145673998,48.86654160677608],[2.3171686377135927,48.866736114808106],[2.316539253799533,48.8669369862358],[2.3159097328723703,48.8671379275894],[2.3152998138749012,48.8673326454971],[2.315008373519703,48.8674257040073],[2.314729235750036,48.867514846685566],[2.3144648679338786,48.86759928688491],[2.314217737439293,48.8676782379643],[2.3139903116330913,48.86775091328457],[2.3137850578832797,48.86781652620914],[2.3136044435589724,48.86787429010377],[2.3134509360270386,48.86792341833305],[2.3133270026543187,48.867963124261024],[2.3132351108099556,48.86799262124933],[2.31317772786079,48.86801112265579],[2.313157321174856,48.868017841831914],[2.3131503757477105,48.8680202518772],[2.313132230422582,48.868026192754996],[2.3130653326190895,48.86804772157433],[2.3129626128528287,48.86808053741629],[2.3128300562147217,48.86812274940348],[2.312673647792053,48.8681724666599],[2.312499372673301,48.86822779831195],[2.312121162707456,48.86834774134314],[2.311743307026404,48.86846745165843],[2.3115694747665714,48.86852249244902],[2.31141368634394,48.86857180255902],[2.3112819268482667,48.86861349116933],[2.311180181370389,48.86864566746365],[2.3111144349964263,48.86866644062664],[2.311096931814575,48.868671960152824],[2.31109067281605,48.868673919838216],[2.3110815733284085,48.86867670499612],[2.311057276909935,48.86868420619987],[2.3110199614699525,48.868695747922885],[2.3109718049200296,48.868710654638704],[2.310851680131435,48.86874786094492],[2.3107143258231133,48.86879042091408],[2.310577165279028,48.86883293035703],[2.3104576217780846,48.868869985102464],[2.310409901195527,48.868884778164244],[2.310373118605469,48.868896180993914],[2.3103494519172614,48.86890351807227],[2.3103410790401426,48.868906113880826],[2.3098954666185136,48.86905181666731],[2.3098954666185136,48.86905192693615],[2.3098734693330414,48.86905876362019],[2.3098250455599327,48.869073817577515],[2.3097765474258267,48.869088904667706],[2.3097543270562824,48.869095840760735],[2.3097477441924354,48.86909796246982],[2.3097292742402544,48.86910389857147],[2.3096634525974764,48.86912503745717],[2.3095704211689565,48.86915490442871],[2.309463738996783,48.86918914650113],[2.3093569651220776,48.86922341069834],[2.3092636585881507,48.8692533440566],[2.309197378434817,48.86927459362107],[2.3091786104518803,48.86928060168361],[2.3091716837054435,48.86928280644122],[2.3091578936216024,48.869287443445074],[2.309129791343821,48.86929703737687],[2.3091019847947223,48.869306573388144],[2.309089081897042,48.86931103663363],[2.3090825183126924,48.86931310362331],[2.30906423368927,48.869318828915766],[2.308999192785052,48.86933916608402],[2.3089073421107855,48.8693678714877],[2.308802064596165,48.86940076847969],[2.3086967431676158,48.86943368042148],[2.308604760754889,48.869462430685644],[2.308539500285491,48.86948284265344],[2.308521072944245,48.869488616583766],[2.3085143446868983,48.86949073970962],[2.3085045536132895,48.86949391880216],[2.308477470420627,48.86950267696656],[2.308435566862755,48.869516216624675],[2.308381314698636,48.86953374019765],[2.3082456515674323,48.86957754877275],[2.308090255075939,48.86962772207025],[2.307934899269412,48.86967787948893],[2.3077993581943588,48.86972164045267],[2.3077451975723022,48.86973912833989],[2.3077034058996446,48.869752624406175],[2.3076764549339828,48.86976133108294],[2.307666816431805,48.86976445080154],[2.307649658466829,48.869769881070624],[2.3076049354049815,48.86978400265818],[2.307541823365625,48.86980392403049],[2.307469498465906,48.869826753655275],[2.3073971368264665,48.869849600005665],[2.307333914564367,48.86986957155878],[2.307289007799085,48.869883776795945],[2.3072715926489025,48.86988932420067],[2.307264394787836,48.869891628533026],[2.307244611678243,48.86989790779489],[2.3071744887222394,48.869920116592795],[2.307075621805069,48.86995140156381],[2.306962408948465,48.86998721368141],[2.306849248174217,48.870023003930385],[2.3067505375065878,48.87005422330691],[2.306680674968419,48.87007632281859],[2.306661061128665,48.87008253106649],[2.3066540585804205,48.870084753477215],[2.3066381796453186,48.87009006552424],[2.3066036875875113,48.87010155603056],[2.306569135692172,48.87011303594559],[2.3065530772433362,48.87011831622377],[2.306545492130539,48.87012060841988],[2.3065260090734228,48.87012655671339],[2.306467218995806,48.8701445565207],[2.306408446747355,48.87016258550534],[2.3063889859784013,48.87016857027396],[2.3063814320695712,48.870170913539425],[2.306363203913264,48.87017698838923],[2.3063237683786326,48.87019006749958],[2.3062843309467382,48.87020313527347],[2.306266097094152,48.87020917611852],[2.3062584043756544,48.87021159662203],[2.306236921089379,48.870218351154364],[2.306160461292137,48.87024238697822],[2.3060524746591398,48.87027633293823],[2.3059287181509376,48.87031523838721],[2.305804948725438,48.87035415269011],[2.3056969233405766,48.87038812522786],[2.305620398955682,48.87041220539285],[2.305598873687302,48.870418988772116],[2.30559113252869,48.8704214425824],[2.305578536111568,48.87042561276036],[2.305545952786332,48.87043633759913],[2.3054474395023306,48.87046872307195],[2.305348820842653,48.870501142646475],[2.3053161057993634,48.870511910122616],[2.305303324974574,48.870516140008164],[2.30529746281897,48.870513331957284],[2.3052806608862113,48.87050503493404],[2.3052171572487055,48.870473437975505],[2.305118653185872,48.87042427713283],[2.3049909878237145,48.870360480397494],[2.304840000285907,48.87028497576077],[2.304671529698595,48.87020069122178],[2.3043054958738196,48.870017494507294],[2.303939599349576,48.869834314591145],[2.3037713003856197,48.869750051129074],[2.3036205531226415,48.86967457614216],[2.3034931966844,48.86961081775624],[2.3033950701945116,48.8695617041063],[2.3033320127802597,48.86953016332657],[2.303315459702702,48.86952189780294],[2.303309863565431,48.8695191235424]];
//
var array1 = turf.lineString(list1);
var array2 = turf.lineString(list2);
var length = turf.lineDistance(array1);
var along = turf.along(array1, 1);
////const numberOfPoints = Object.keys(array2).length; // obtenir le nombre de points
const lineDistance = turf.length(array1);
console.log("lineDistance : " + lineDistance);
//
var arc = [];
var steps = 10*60*60; // 5 min (x60 secondes) à 60 images par secondes
var speedMove = 10;
// 
//// Draw an arc between the `origin` & `destination` of the two points
for (var i = 0; i < length; i += length / steps) {
	var segment = turf.along(array1, i);
	arc.push(segment.geometry.coordinates);
}

//
var temps = 1000;


var up = new THREE.Vector3(0, 0, 1);
var val1 = 0;
var val2 = 0;
var prevX = arc[0][1];
var prevY = arc[0][0];
//var prevX = list1[0][1];
//var prevY = list1[0][0];
var prevBearing = 25;
var bearing = 25;
var increment = 0;
var convArray2 = arc;
var convArrayLS2;
let reqAnim;
var speed = 1;
//




//export namespace ThreejsCameraAnimation {
    interface Location {
        target: GeoCoordinates;

        tilt: number;
        heading: number;
        distance: number;
		valeur: number;
    }

    let currentLocation = 0;
    const locations: Location[] = [
		/*				{
            // arc triomphe arriere
            target: new GeoCoordinates(48.853646831055556, 2.347297668457031),
            tilt: 0,
            heading: 0,
            distance: 5000000,
			valeur: 6, // ancien 1
        },*/
				{
            // notre dame
            target: CONCORD,
            tilt: 10,
            heading: 90,
            distance: 400,
			valeur: 0.5, // ancien 1
        },
		
		{
            // arc triomphe arriere
            target: new GeoCoordinates(48.87564617563084, 2.2920656204223633, 800),
            tilt: 45,
            heading: -145,
            distance: 300,
			valeur: 1, // ancien 1
        },
		{
            // arc triomphe kleber
            target: new GeoCoordinates(48.87323638871415, 2.294619083404541),
            tilt: 55,
            heading: -175,
            distance: 130,
			valeur: 1, // ancien 1
        },

				{
            // arrivee tour eiffel
            target: new GeoCoordinates(48.858284648396626, 2.2945332527160645, 300),
            tilt: 20,
            heading: -215,
            distance: 650,
			valeur: 1, //mettre 24 
        },
						{
            // arrivee tour eiffel
            target: new GeoCoordinates( 48.85842582331189, 2.29514479637146, 300),
            tilt: 20,
            heading: 0,
            distance: 650,
			valeur: 1, //mettre 24 
        },
								{
            // arrivee tour eiffel
            target: new GeoCoordinates( 48.85812229675188, 2.2948765754699707, 300),
            tilt: 20,
            heading: 190,
            distance: 750,
			valeur: 1, //mettre 24 
        },
		
    ];
	
/////////////////////////ligne bleue complete///////////////////////////


	var blue1Enable = true;
	var geoJsonDataSource;
var geoJsonDataSource1;
	var arcLine = [];
	//var obj, obj2;
	async function getLineConcorde() {


		/////////////////////////////////////////////////
		

		////////////////////////////////////////////////////////
		const res1 = await fetch("resources/mapConcorde.geojson");
	    const data1 = await res1.json();
	
		//var json1 = "resources/mapConcorde.geojson";
	    var dataProvider1 = new GeoJsonDataProvider("concord", data1);
	    geoJsonDataSource1 = new VectorTileDataSource({
			dataProvider: dataProvider1,
			name: "concord",
			styleSetName: "geojson",
			addGroundPlane: false,
	    });	
	await mapView.addDataSource(geoJsonDataSource1);
		const theme1: Theme = {
			styles: {
				geojson: [
					{
					id: "trace",
					when: "$geometryType == 'line'",
					technique: "solid-line",
					renderOrder: 10000,
					attr: {
						color: "#0000ff",
						metricUnit: "Pixel",
						lineWidth: [
							"interpolate",
							["linear"],
							["zoom"],
							4, "0.002px",
							5, "0.002px",
							6, "0.003px",
							8, "0.005px",
							9, "0.01px",				
							13, "0.05px",
							14, "0.1px",
							15, "0.45px",
							16, "1px",
							17, "2.5px",
							18, "7.5px",
							19, "30px",
							20, "100px"
                		],
						fadeNear: 0.5,
						fadeFar: 1,
						clipping: true
						}
					},
				],
			},
	   };
		geoJsonDataSource1.setTheme(theme1);
	    //mapView.update();

		/*
	   let i = 0;
		//var longPath = coordinates.length;
        const timer = setInterval(() => {
			console.log("coord : " + longPath);
            if (i < coordinates.length) {
				data2.features[0].geometry.coordinates.push(coordinates[i]);
					   
				//console.log("X" + i + " : " + data2.features[0].geometry.coordinates);
				//mapView.getDataSourceByName("trace");
				var arrayP = turf.lineString(data2.features[0].geometry.coordinates);
				var lengthP = turf.lineDistance(arrayP);
				var segment = turf.along(arrayP, i);
				arcLine.push(segment.geometry.coordinates);
				       // let routeLine = new mapView.Polyline(segment, {style: { strokeColor: 'blue', lineWidth: 3 }});
				//console.log("X" + i + " : " + lengthP);
				//var alongP = turf.along(arrayP, 1);
				//mapView.update();
				i++;
			} else {
                window.clearInterval(timer);
            }
	   
		}, 1);*/
		

		//return mapView;
       	
		
      
   

		
		
		
		
		//geoJsonDataSource2.setTheme(theme2);
		/*let i = 0;
        const timer = setInterval(() => {
            if (i < coordinates.length) {
                data2.features[0].geometry.coordinates.push(coordinates[i]);
				//data2.features[0].geometry.coordinates = [coordinates[i]];
				//coordinates = data2.features[0].geometry.coordinates;
				//mapbox.getSource('trace').setData(data);
				console.log("prevX : " + prevX)
					geoJsonDataSource2.setStyleSet(theme2);	
				
				//mapView.addDataSource(data);
				//data.setTheme(theme);
				//mapView.updateTile(data);
				//data.features[0].geometry.coordinates(data.features[0].geometry.coordinates[i][1], data.features[0].geometry.coordinates[i][0])
				//mapView.addDataSource(data);
				//console.log(data);
				mapView.update();
                i++;
            } else {
                window.clearInterval(timer);
            }
        }, 4);*/
		
		const res = await fetch("resources/mapConcorde.geojson");
	    const data = await res.json();
	
		//var json1 = "resources/mapConcorde.geojson";
	    var dataProvider = new GeoJsonDataProvider("concorde-trocadero", data);
	    geoJsonDataSource = new VectorTileDataSource({
			dataProvider,
			name: "concorde-trocadero",
			styleSetName: "geojson",
			addGroundPlane: false,
	    });	
		
		
		

		await mapView.addDataSource(geoJsonDataSource);

	    const theme: Theme = {
			styles: {
				geojson: [
					{
					id: "trace",
					when: "$geometryType == 'line'",
					technique: "solid-line",
					renderOrder: 10000,
					attr: {
						color: "#00baff",
						metricUnit: "Pixel",
						lineWidth: [
							"interpolate",
							["linear"],
							["zoom"],
							4, "0.002px",
							5, "0.002px",
							6, "0.006px",
							8, "0.01px",
							9, "0.02px",				
							13, "0.1px",
							14, "0.2px",
							15, "0.9px",
							16, "2px",
							17, "5px",
							18, "15px",
							19, "60px",
							20, "200px"
                		],
						fadeNear: 0.5,
						fadeFar: 1,
						clipping: true
						}
					},
				],
			},
	   };
		geoJsonDataSource.setTheme(theme);

		//await mapView.addDataSource(data);
		
	   
		//mapView.update();
	}
	function removeLineConcorde() {
		mapView.removeDataSource(geoJsonDataSource1);
	mapView.removeDataSource(geoJsonDataSource);
	}
	
/////////////////////////ligne orange///////////////////////////	
	var orangeEnable = false;
	var geoJsonDataSource2;
async function getLineParking() {
	  const res2 = await fetch("resources/parking1.geojson");
	  const data2 = await res2.json();

	//var json1 = "resources/parking1.geojson";
	//obj = await Object.keys(json1).length;

	  const dataProvider = new GeoJsonDataProvider("parking", data2);
	   geoJsonDataSource2 = new VectorTileDataSource({
		dataProvider,
		name: "parking",
		styleSetName: "geojson",
		   addGroundPlane: false,
	  });
		await mapView.addDataSource(geoJsonDataSource2);
	    const truc: Theme = {
		styles: {
		  geojson: [
			{
				when: "$geometryType == 'line'",
				technique: "solid-line",
				renderOrder: 11000,
				attr: {
					color: "#ff6600",
					metricUnit: "Pixel",
					lineWidth: [
                    "interpolate",
                    ["linear"],
                    ["zoom"],
		4, "0.002px",
		5, "0.002px",
		6, "0.006px",
		8, "0.01px",
		9, "0.02px",				
        13, "0.1px",
        14, "0.2px",
        15, "0.9px",
		16, "2px",
		17, "5px",
		18, "15px",
		19, "60px",
		20, "200px"
                ],
                fadeNear: 0.8,
                fadeFar: 0.9,
                clipping: false
				}
			},
		  ],
		},
	   };
	   geoJsonDataSource2.setTheme(truc);
	//console.log("yyy : " + dataProvider)
};
function removeLineParking() {
	mapView.removeDataSource(geoJsonDataSource2);
}
	
	var blue2Enable = false;
	var geoJsonDataSource3;
async function getLineOutParking() {
	  const res3 = await fetch("resources/parkingOut.geojson");
	  const data3 = await res3.json();
	//var json1 = "resources/parkingOut.geojson";
	//obj = await Object.keys(json1).length;

	  const dataProvider = new GeoJsonDataProvider("parkingOut", data3);
	   geoJsonDataSource3 = new VectorTileDataSource({
		dataProvider,
		name: "parkingOut",
		styleSetName: "geojson",
	  });
		await mapView.addDataSource(geoJsonDataSource3);
	    const theme: Theme = {
		styles: {
		  geojson: [
			{
				when: "$geometryType == 'line'",
				technique: "solid-line",
				renderOrder: 11000,
				attr: {
					color: "#00baff",
					metricUnit: "Pixel",
					lineWidth: [
                    "interpolate",
                    ["linear"],
                    ["zoom"],
		4, "0.002px",
		5, "0.002px",
		6, "0.006px",
		8, "0.01px",
		9, "0.02px",				
        13, "0.1px",
        14, "0.2px",
        15, "0.9px",
		16, "2px",
		17, "5px",
		18, "15px",
		19, "60px",
		20, "200px"
                ],
                fadeNear: 0.8,
                fadeFar: 0.9,
                clipping: false
				}
			},
		  ],
		},
	   };
	   geoJsonDataSource3.setTheme(theme);
	};
function removeLineOutParking() {
	mapView.removeDataSource(geoJsonDataSource3);
}


var paths = arc;

var timeAnimation = 100;
var next = 0;
var nextpnt = 0;

var scene1 = new THREE.Scene();
var ligne;
////////////////////////////////////////////////////////////////////////////
function line2() {
	
	
	const pointsArray = [];
	   //var curve = new THREE.LineSegments(
    pointsArray.push(new THREE.Vector3( 0, 0 ))
	 pointsArray.push(new THREE.Vector3( paths[1][1],paths[1][0] ))
      pointsArray.push(new THREE.Vector3( paths[2][1],paths[2][0] ))
      pointsArray.push(new THREE.Vector3( paths[50][1],paths[50][0] ))
	console.log(paths[50][1]);
	/* for (var j in paths){
		pointsArray.push( new THREE.Vector2( paths[j][1], paths[j][0] ) );
		 console.log(j);
	}*/
    //);
	//console.log(pointsArray);
   // var points = curve.getPoints( 50 );
    var geometry = new THREE.BufferGeometry().setFromPoints( pointsArray );
    var material = new THREE.LineBasicMaterial( { color : 0xff0000, transparent : true} );
    //Create the final object to add to the scene
    var curveObject = new THREE.Line( geometry, material );
	curveObject.anchor = CONCORD;
	curveObject.geometry.translate(0, 0, 5);
	mapView.mapAnchors.add(curveObject);
    return curveObject;
}

////////////////////////////////////////////////////////////////////////////







///////////////////////// DEBUT SECTION POUR L'EGO CAR CONSTANT AU ZOOM///////////////////////////
    //const CONCORD = new GeoCoordinates(list2[0][1], list2[0][0]);
    const geoPosition = {
        latitude: CONCORD.lat,
        longitude: CONCORD.lng,
        altitude: CONCORD.altitude ?? 0
    };



    function updateMapAnchor() {
		const valGeo = {latitude: prevY, longitude: prevX};
		const ratioZoom = mapView.zoomLevel / 20;
        if (egoAnchor !== undefined && egoAnchor.anchor !== undefined) {
            const scaleFactor = mapView.targetDistance / 300 * ratioZoom;
            if (egoAnchor.scale.x !== scaleFactor) {
				//console.log("scaleFactor : " + scaleFactor);
                egoAnchor.scale.set(scaleFactor, scaleFactor, scaleFactor);
				//meshTriangle.scale.set(scaleFactor/4, scaleFactor/4, scaleFactor);
				egoList[2].scale.set(scaleFactor/200, scaleFactor/200, scaleFactor/200);
				
                mapView.update();
            }
            if (!(egoAnchor.anchor as GeoCoordinates).equals(valGeo)) {
                egoAnchor.anchor = GeoCoordinates.fromObject(valGeo);
				//meshTriangle.anchor = GeoCoordinates.fromObject(valGeo);
				egoList[2].anchor = GeoCoordinates.fromObject(valGeo);
                mapView.update();
            }
        }
////////////permet de retrouver le niveau de zoom
    }
	
	
var action;	

function addCar(mapView: MapView): MapAnchor<THREE.Object3D> {
    const sizeCube8 = 0.01; // o.3 R5
   // const figureGeoPosition = new GeoCoordinates( 48.86562466026018, 2.3217665271639305);

    const clock8 = new THREE.Clock();

    let figure8: MapAnchor<THREE.Group> | undefined;
    let mixer8: THREE.AnimationMixer | undefined;
    const onLoad = (object: any) => {
        mixer8 = new THREE.AnimationMixer(object);

         action = mixer8.clipAction(object.animations[0]);
        action.play();

        figure8 = object as THREE.Group;
        figure8.traverse((child: THREE.Object3D) => {
            child.renderOrder = 10000;
			//child.position.y = -50;
			child.castShadow = true;
			child.receiveShadow = true;
        });
        figure8.renderOrder = 10000; 
		figure8.rotateZ(THREE.Math.degToRad(65)); 
        figure8.scale.set(sizeCube8, sizeCube8, sizeCube8);
        figure8.name = "Zhcb";
        figure8.anchor = CONCORD;
		//figure8.material = new THREE.MeshPhysicalMaterial({ color: "#ff0000"})
        figure8.overlay = false;
		figure8.transparent = true;
        mapView.mapAnchors.add(figure8);
		egoList[2] = figure8;
    };
    const loader8 = new FBXLoader();
    loader8.load("resources/ZHCB3.fbx", onLoad);

    const onRender = (event: RenderEvent) => {
        if (mixer8) {
            const delta = clock8.getDelta();
            mixer8.update(delta);
        }
    };
    mapView.addEventListener(MapViewEventNames.Render, onRender);
    mapView.beginAnimation();
	return figure8;
}	
//////////////////////////////AJOUT DU TRIANGLE DE L'EGOCAR///////////////////
var egoEnable = false;
var egoList = [];
function addTriangle(mapView: MapView): MapAnchor<THREE.Object3D> {
	const triangleShape = new THREE.Shape()
				.moveTo(0,0 )
				.lineTo(15,8 )
				.lineTo(30,0 )
				.lineTo(15,30 )
	let geomTriangle = new THREE.ShapeGeometry( triangleShape );
	var centerX = ((0 + 30 + 15 / 3));
	var centerY = ((0 + 0 + 30 / 3));

	const meshTriangle = new THREE.Mesh( geomTriangle, new THREE.MeshBasicMaterial({ color: "#fff", transparent: true})) as MapAnchor;
	meshTriangle.anchor = CONCORD;
	meshTriangle.renderOrder = 10000;
	meshTriangle.overlay = false;
	meshTriangle.geometry.translate(-centerX+20, -centerY, 1.2);
	meshTriangle.receiveShadow = true;
	meshTriangle.castShadow = true;
	meshTriangle.scale.set(0.2, 0.2, 2);
	meshTriangle.rotateZ(THREE.Math.degToRad(-85));
	
	mapView.mapAnchors.add(meshTriangle);
	egoList[0] = meshTriangle;
	return meshTriangle;
};

		
//////////////////////////////AJOUT DU CERCLE DE L'EGOCAR///////////////////
function addMapAnchor(mapView: MapView): MapAnchor<THREE.Object3D> {

	const circleCar = new THREE.CylinderGeometry(14, 14, 0.001, 64);
	const materialCar = new THREE.MeshPhysicalMaterial({ color: "#00baff", emissive:"#191919", reflectivity: 1,  roughness: 0.5, metalness: 0, transmission: 0.8, ior: 2.3, opacity: 0,  thickness: 0, clearcoat: 0 });
	
	const circleHole = new THREE.CylinderGeometry(13, 13, 5, 64);
	const circleMaterial = new THREE.MeshStandardMaterial({ color: "#ff6600"});

    //var GCercle = new THREE.Mesh(circleCar, materialCar);
   // var PCercle = new THREE.Mesh(circleHole, circleMaterial);
	
	//GCercle.updateMatrix();
	//PCercle.updateMatrix();
	
	//const egoAnchor = CSG.subtract(GCercle, PCercle);
    //var d = CSG.sphere({ radius: 5 });  
      //var cHole = geometry.holes(circleHole);
      //var egoAnchor = circleHole.toMesh();
	//egoAnchor.material = new THREE.MeshLambertMaterial( { color: 0x00ff00 } );
	
	const egoAnchor = new THREE.Mesh(circleCar, materialCar) as MapAnchor;
	egoAnchor.geometry.translate(0, 0, 0);
	egoAnchor.receiveShadow = false;
	egoAnchor.castShadow = false;
	egoAnchor.anchor = CONCORD;
	egoAnchor.overlay = false;
	egoAnchor.renderOrder = 10000;
	egoAnchor.rotateZ(THREE.Math.degToRad(-22.5));
	egoAnchor.rotateX(THREE.Math.degToRad(90));

	mapView.mapAnchors.add(egoAnchor);
	egoList[1] = egoAnchor;
	
    return egoAnchor;
};

//////////////////////////FONCTION DE SUPPRESSION DU CERCLE ET DU TRIANGLE DE L'EGOCAR///////////////////
function egoRemove() {
	for (var w in egoList){
		mapView.mapAnchors.remove(egoList[w]);
	}
	egoList = [];
};
//////////////////////////INITIALISATION DE L'EGOCAR///////////////////////////
export const map = initializeMapView("map");
var egoAnchor;// = addMapAnchor(mapView);
var meshTriangle;// = addTriangle(mapView);	
var figure8;
var line1;


	
function triAdd() {
	figure8 = addCar(mapView);
	egoAnchor = addMapAnchor(mapView);
	
	//meshTriangle = addTriangle(mapView);	
	mapView.addEventListener(MapViewEventNames.Update, updateMapAnchor);/**/
};
/////////////////////////FIN SECTION POUR L'EGO CAR CONSTANT AU ZOOM///////////////////////////	


////////////////////////////FONCTION DE DEPLACEMENT ROTATION DE L'EGOCAR///////////////////////////////
function moveEgo() {
	increment += speed;

	val1 = arc[increment][0];
	val2 = arc[increment][1];

	egoAnchor.anchor = new GeoCoordinates(val2, val1);
	//meshTriangle.anchor = new GeoCoordinates(val2, val1);
	egoList[2].anchor = new GeoCoordinates(val2, val1);
	var point1 = turf.point([prevX, prevY]);
	var point2 = turf.point([val1, val2]);
	//console.log("point1A : " + prevY + " --- point1B : " + prevX);
	//console.log("point2A : " + val2 + " --- point2B : " + val1)
	var bearing = turf.bearing( point1, point2);

	//meshTriangle.rotateZ(THREE.Math.degToRad(bearing-prevBearing));
	egoList[2].rotateZ(THREE.Math.degToRad(prevBearing-bearing));
	//egoAnchor.rotateY(THREE.Math.degToRad((bearing-prevBearing)));

	prevX = val1;
	prevY = val2;
	prevBearing = bearing;

	////calcul de la distance restante//////////////
	convArray2 = convArray2.slice(1, convArray2.length)
	var convArrayLS2 = turf.lineString(convArray2);
	var convArrayDist = turf.lineDistance(convArrayLS2);
	value.textContent = String(convArrayDist.toFixed(2) + " km");
	distanceContainer.appendChild(value);

	if (increment < steps) {
		reqAnim = requestAnimationFrame(moveEgo);
	}else{
		increment = 0;
		stopEgo();
	}
	console.log("inc : " + convArrayLS2);
}
//////////////////////fonction d'arret de l'animation de l'egocar/////////////////
var egoStop = false;
function stopEgo() {
	cancelAnimationFrame(reqAnim);
}
//////////////////////fonction d'acceleration de l'egocar/////////////////
function accelEgo() {
	if (speed == 0){
		speed = 1;
		//
	}else{
		speed += 1;
	}
	moveEgo();
}
//////////////////////fonction de ralentissement de l'egocar/////////////////
function slowEgo() {
	if (speed > 0){
		speed -= 1;

	}else{
		//meshTriangle.rotateZ(THREE.Math.degToRad((-45)));
		stopEgo();
		speed = 0;
	}
}

function moveR5(){
    const optionsR5 = {
        target: new GeoCoordinates(val2, val1),
        //tilt: 45,
        //zoomLevel: 18.5,
        heading: null,
        globe: true,
        headingSpeed: 0.2
    };
    mapView.addEventListener(MapViewEventNames.AfterRender, () => {

		if(rota){
		optionsR5.heading = (optionsR5.heading + optionsR5.headingSpeed) % 360;
			optionsR5.target = new GeoCoordinates(val2, val1);
        mapView.lookAt(optionsR5);
        mapView.update();
		}else{
			mapView.removeEventListener(MapViewEventNames.AfterRender, moveR5);
		}
      
    });

}
var rota = false;



	
window.ontouchend = (ev: TouchEvent) => {
	const oldLocation = locations[currentLocation];
	currentLocation++;
	if (currentLocation >= locations.length) {
		currentLocation = 0;
	}
	const newLocation = locations[currentLocation];
	if (oldLocation === newLocation) {
		return;
	}
	startTransition(mapView, newLocation);
};
window.onkeydown = (ev: KeyboardEvent) => {
	const oldLocation = locations[currentLocation];
	switch (ev.which) {

/////////////////////DEBUT TOUCHE CLAVIER/////////////////////				
//touche "<- " pour passer au point de vue precedent
	case 37:
		currentLocation--;
	break;

//touche " -> " pour passer au point de vue suivant				
	case 39:
		currentLocation++;
	break;

//touche "Fleche Haut" pour accelerer		
	case 38:
		var couleur = "#ff0000";
			rota = true;
			moveR5();
	break;

//touche "Fleche Bas" pour ralentir				
	case 40:
		var couleur = "#000fff";
			rota = false;

	break;

	case 98:
//touche "2" (trajet base parking - troca)
	if (!blue2Enable) {
		EndAdd();
		getLineOutParking();
		blue2Enable = true;
	} else{
		removeEntity2();
		removeLineOutParking();
		blue2Enable = false;
	}
	break;

	case 96:
//touche 0 (trajet base concorde - troca)
	if (blue1Enable) {
		EndAdd();
		getLineConcorde();
		blue1Enable = false;

	} else{
		removeEntity2();
		removeLineConcorde();
		blue1Enable = true;

	}
	break;

//touche "1" (trajet orange concorde - parking)
	case 97:
	if (!orangeEnable) {
		sleepAdd();
		getLineParking();
		orangeEnable = true;
	} else{
		removeEntity()
		removeLineParking();
		orangeEnable = false;
	}
	break;

//touche "2" (trajet base parking - troca)
	case 98:
	if (!blue2Enable) {
		EndAdd();
		getLineOutParking();
		blue2Enable = true;
	} else{
		removeEntity2();
		removeLineOutParking();
		blue2Enable = false;
	}
	break;

//touche "9" pour montrer l'ndication en overlay
	case 105:
		console.log("dist " + length);
		distanceContainer.appendChild(value);
	break;

//touche "a" pour bouger l'ego car	
	case 65:
		console.log("a");
		//listObjectCircle[0].anchor = new GeoCoordinates( 48.86628334414011, 2.321663796901703);
	break;
		//touche "c" pour faire apparaitre/disparaitre l'ego car				
	case 67:
			line2();

	break;

//touche "z" pour bouger l'ego car			
	case 90:
	if (!egoEnable) {
		console.log("convArray2 : " +convArray2.length)
		increment = 0; // on remet à zeroz
		triAdd();
		egoEnable = true;

	}else{
		prevBearing = 25;
		bearing = 25;
		convArray2 = arc;
		increment = 0;
		egoRemove();
		egoEnable = false;
	}
	break;
//touche "s" pour bouger l'ego car			
	case 83:
		if (egoStop) {
			stopEgo();
			egoStop = false;
			action.stop();
			
		}else{
			moveEgo();
			egoStop = true;
			action.play();
			
		}
	break;
//touche "-" pour ralentir l'ego car	
	case 109:
		slowEgo();
	break;
//touche "+" pour ralentir l'ego car	
	case 107:
		accelEgo();
	break;
/////////////////////END TOUCHE CLAVIER/////////////////////
	}

	if (currentLocation < 0) {currentLocation = locations.length - 1;
	} else if (currentLocation >= locations.length) {currentLocation = 0;}

	const newLocation = locations[currentLocation];
	if (oldLocation === newLocation) {return;}
	startTransition(mapView, newLocation);
};
	
startTransition(mapView, locations[0]);

const distanceContainer = document.getElementById('distance');
var value = document.createElement('pre');
distanceContainer.innerHTML = "";
value.textContent = String(length.toFixed(2) + " km");


/////////////////////////////fonction de mouvement de camera//////////////////////////
function startTransition(mapView: MapView, location: Location) {
	const startPosition = mapView.camera.position.clone();//permet le déplacement sur les axes
	const startQuaternion = mapView.camera.quaternion.clone();//permet la rotation 
	const targetPosition = MapViewUtils.getCameraPositionFromTargetCoordinates(
		location.target,
		location.distance,
		location.heading,
		location.tilt,
		mapView.projection
	);

	const targetQuaternion = MapViewUtils.getCameraRotationAtTarget(
		mapView.projection,
		location.target,
		location.heading,
		location.tilt,
	);

	const startTime = Date.now();
	const curve = new THREE.CatmullRomCurve3([startPosition, targetPosition]);

	const updateListener = () => {
		const time = Date.now();
		let t = (time - startTime) / (temps*location.valeur);

		if (t >= 1) {
			t = 1;
			mapView.endAnimation();
			mapView.removeEventListener(MapViewEventNames.Render, updateListener);
		}
		mapView.camera.position.copy(curve.getPoint(t));
		const rotation = startQuaternion.clone().slerp(targetQuaternion, t);
		mapView.camera.quaternion.copy(rotation);
		mapView.camera.updateMatrixWorld(true);
	};

	mapView.addEventListener(MapViewEventNames.Render, updateListener);
	mapView.beginAnimation();
}
	


//
//	
//	
//	
//	
//	
//	
//	
//	
//	var arc2 = arc;
//	var arc3 = [];
// 
//// Draw an arc between the `origin` & `destination` of the two points
//
//	
//	
//	var ajout = 0;
//	var nbreFrame = 200;
//	var etapes = 100;
//	var res5;
//	var data5;
//	var pinRoute;
//	var long;
//
//	//mapView.addDataSource(;
//	
//	////////////////////////////ligne rouge///////////////////////////
////	window.addEventListener("dblclick", (evt) => {
////	async function getLineSaclay2() {
////	    res5 = await fetch("resources/mapConcorde.geojson");
////	    data5 = await res5.json();
////		
////		
////		const [data6] = await Promise.all([fetch("resources/mapConcorde.geojson").then((response) => response.json())]) 
////        const path6 = turf.lineString(data6.features[0].geometry.coordinates);
////		long = turf.lineDistance(path6);
////		const animationDuration = 2000;
////		const pathDistance = 20000;
////		let start;
////		/*
////		function frame(time) {
////            if (!start) start = time;
////            const animationPhase = (time - start) / animationDuration;
////            if (animationPhase > 1) {
////                return;
////            }
////
////            // Get the new latitude and longitude by sampling along the path
////            var alongPath = turf.along(path6, pathDistance * animationPhase).geometry.coordinates;
////            var lngLat = {
////                lng: alongPath[0],
////                lat: alongPath[1]
////				
////            };
//////////////////////////////////mettre le style ici/////////////////////////
////			//console.log(lngLat);
////			
////			requestAnimationFrame(frame);
////		}
////		requestAnimationFrame(frame);*/
////		
////		
////		
////		
////		
////		
////		
////
////		pinRoute = await data6.features[0].geometry.coordinates;//pour connaitre le nombre de point/ligne dans le geojson
////
////		console.log(" aaa : " + long);
////		console.log(" bbb : " + pinRoute.length);
////		console.log(" ccc : " + data6);
////		
////		
////	    const dataProvider = new GeoJsonDataProvider("saclay", data6);
////	    const geoJsonDataSource5 = new VectorTileDataSource({
////		dataProvider,
////		name: "saclay",
////		styleSetName: "geojson",
////		addGroundPlane: false,
////		});
////		await mapView.addDataSource(geoJsonDataSource5);
////		
////		        await geoJsonDataSource5.setTheme({
////            styles: [
////                {
////                    styleSet: "geojson",
////                    when: "$geometryType == 'line'",
////				id: "saclay",
////				technique: "solid-line",
////				renderOrder: 10000,
////				
////				attr: {
////					color: "green",
////					metricUnit: "Pixel",
////					lineWidth: 8
////				}
////
////                }]});
////		       dataProvider.onDidInvalidate(() => {
////				   mapView.update();
////			   });
////				var j = 0;
////			var alo =  turf.along(path6, 1).geometry.coordinates;
////		       const animate = () => {
////				   j += 1;
////            	    
////					var lngLat = {
////						lng: alo[0],
////						lat: alo[1]
////
////					};
////				  //alo  = turf.along(data6, 1).geometry.coordinates;
////				   console.log("azerty " + j + " -- " + alo[0]);
////			   };
////
////        //setInterval(animate, 2000);
////
////        //return mapView;
////				
////	    /*const theme: Theme = {
////			styles: {
////			  geojson: getStyleSet()
////			},
////		};*/
//////		let i = 0;
//////        const timer = setInterval(() => {
//////            if (i < pinRoute.length) {
//////                //data5.features[0].geometry.coordinates.push(pinRoute[i]);
//////               // mapView.dataSources('trace').setData(data5);
//////                //map.panTo(coordinates[i]);
//////				console.log("i : " + i)
//////                i++;
//////            } else {
//////                window.clearInterval(timer);
//////            }
//////        }, 10);
////	    //geoJsonDataSource5.setTheme(theme);
////		mapView.update();
////	};
////	getLineSaclay2();
////		//moveLine();
////	});
////
////	function moveLine() {
////		ajout += 1;
////		console.log(" num : " + ajout);
////		//var lelong = turf.along(truc, 1);
////		if (ajout < nbreFrame) {
////			requestAnimationFrame(moveLine);
////		}else{
////			ajout = 0;
////		}
////		
////	}
////	var couleur = "red";
////	//////////////////////////////////
////  function getStyleSet(): StyleSet {

////	return [{

////				when: "$geometryType == 'line'",
////				id: "trace",
////				technique: "solid-line",
////				renderOrder: 10000,
////				
////				attr: {
////					color: couleur,
////					metricUnit: "Pixel",
////					lineWidth: 8
////				}
////			}
////		  ];
////  }
////	  function getStyleSet2(): StyleSet {
////	return [{
////				when: "$geometryType == 'line'",
////				id: "trace",
////				technique: "solid-line",
////				renderOrder: 10000,
////				
////				attr: {
////					color: "green",
////					metricUnit: "Pixel",
////					lineWidth: 8
////				}
////			}
////		  ];
////  }
//	
//	
//	

	
	

const monuments = [
["EIFFELimport", "eiffel", "resources/EiffelTower.fbx", 0.1, [48.858226623375815, 2.2944796063358880], 46], 
["OBELISKimport", "obelisk", "resources/obelisk.fbx", 0.08, [48.86547612146255, 2.321130372583866],63],
["ARCimport", "arcTriumph", "resources/arcTriomphe.fbx", 0.03, [48.87377930654804, 2.2950247675180435],65]
];


for (var m in monuments) {
	AddMonuments(m);
}

function AddMonuments(n) {

    const sizeCube2 = monuments[n][3];
    const figureGeoPosition2 = new GeoCoordinates(  monuments[n][4][0],  monuments[n][4][1]);

    const clock2 = new THREE.Clock();

    let figure2: MapAnchor<THREE.Group> | undefined;
    var mixer2: THREE.AnimationMixer | undefined;
    const onLoad = (object: any) => {
        mixer2 = new THREE.AnimationMixer(object);

       // const action = mixer2.clipAction(object.animations[n]);
       // action.stop();

        figure2 = object as THREE.Group;
        figure2.traverse((child: THREE.Object3D) => {
            child.renderOrder = 10000;
			child.castShadow = true;
			child.receiveShadow = true;
        });
        figure2.renderOrder = 10000;
		figure2.rotateZ(THREE.Math.degToRad(monuments[n][5]));
        figure2.scale.set(sizeCube2, sizeCube2, sizeCube2);
        figure2.name = monuments[n][1];
        figure2.anchor = figureGeoPosition2;
        figure2.overlay = false;
        mapView.mapAnchors.add(figure2);
    };

    const loader2 = new FBXLoader();
    loader2.load(monuments[n][2], onLoad);

     const onRender = (event: RenderEvent) => {
        if (mixer2) {
            const delta = clock2.getDelta();
            mixer2.update(delta);
        }
    };
    mapView.addEventListener(MapViewEventNames.Render, onRender);
    mapView.beginAnimation();
	
	
}

	var listObject4 = [];
//export namespace SLEEPimport {
	async function sleepAdd(){
    const sizeCube4 = 0.01;
    const figureGeoPosition = new GeoCoordinates( 48.8695191235424, 2.303309863565431);

    const clock = new THREE.Clock();

    let figure4: MapAnchor<THREE.Group> | undefined;
		
    let mixer: THREE.AnimationMixer | undefined;
    const onLoad = (object: any) => {
        mixer = new THREE.AnimationMixer(object);

        const action = mixer.clipAction(object.animations[0]);
        action.play();

        figure4 = object as THREE.Group;
        figure4.traverse((child: THREE.Object3D) => {
            child.renderOrder = 10000;
			child.translateY(3000);
        });
		
        figure4.renderOrder = 10000;
		figure4.rotateX(THREE.Math.degToRad(90)); 
		figure4.rotateY(THREE.Math.degToRad(125)); 
        figure4.scale.set(sizeCube4, sizeCube4, sizeCube4);
        figure4.name = "sleepIcon";
        figure4.anchor = figureGeoPosition;
        figure4.overlay = false;
		//ajouter l'objet 3D dans une liste
		listObject4.push(figure4);
		//ajoute l'objet sur la map
		mapView.mapAnchors.add(figure4);
    };
    const loader4 = new FBXLoader();
    loader4.load("resources/sleepIcon3.fbx", onLoad);

    const onRender = (event: RenderEvent) => {
        if (mixer) {
            const delta = clock.getDelta();
            mixer.update(delta);
        }
    };
    mapView.addEventListener(MapViewEventNames.Render, onRender);
    mapView.beginAnimation();
}
//}

function removeEntity() {
    mapView.mapAnchors.remove(listObject4[0]);
	listObject4 = [];
};

	var listObject5 = [];
//export namespace ARRIVEEimport {
	async function EndAdd(){
    const sizeCube5 = 0.01;
    const figureGeoPosition = new GeoCoordinates( 48.86376194312927, 2.290665507316589);

    const clock = new THREE.Clock();

    let figure5: MapAnchor<THREE.Group> | undefined;
    let mixer: THREE.AnimationMixer | undefined;
    const onLoad = (object: any) => {
        mixer = new THREE.AnimationMixer(object);

        const action = mixer.clipAction(object.animations[0]);
        action.play();

        figure5 = object as THREE.Group;
        figure5.traverse((child: THREE.Object3D) => {
            child.renderOrder = 10000;
			child.translateY(3000);
        });
        figure5.renderOrder = 10000;
        figure5.rotateX(-1.5);
		figure5.rotateY(6.2);
		figure5.rotateZ(7); 
        figure5.scale.set(sizeCube5, sizeCube5, sizeCube5);	
        figure5.name = "arrivee";
        figure5.anchor = figureGeoPosition;
        figure5.overlay = false;
		
		
		listObject5.push(figure5);
        mapView.mapAnchors.add(figure5);
    };
    const loader5 = new FBXLoader();
    loader5.load("resources/arrivee.fbx", onLoad);

    const onRender = (event: RenderEvent) => {
        if (mixer) {
            const delta = clock.getDelta();
            mixer.update(delta);
        }
    };
    mapView.addEventListener(MapViewEventNames.Render, onRender);
    mapView.beginAnimation();
}
	function removeEntity2() {
    mapView.mapAnchors.remove(listObject5[0]);
	listObject5 = [];
};
	
